@page "/setpuestos"


@inject NotificationService NotificationService
@inject AuthenticationStateProvider AuthStateProvider

@inject IPersonal PersonalService
@inject IMontos MontosService
@inject IPuestosTrabajo PuestosTrabajosService
@inject IResumen ResumenService
@inject IMaestraData MaestraService
@inject IRolLogic RolLogicService

@* @attribute [Authorize(Roles = "Admin, Superuser")] *@

<h3>Agregar Puestos de Trabajo</h3>
<p></p>
<RadzenRow>

    <div class="rz-p-2 rz-text-align-center">
        <RadzenRadioButtonList @bind-Value=@Operacion TValue="int" class="mb-2">
            <Items>
                <RadzenRadioButtonListItem Text="Administrar Puestos de Línea" Value="1" />
                <RadzenRadioButtonListItem Text="Administrar Líneas de un Puesto" Value="2" />
            </Items>
        </RadzenRadioButtonList>
    </div>

</RadzenRow>
@if (Operacion == 1)
{

    <FiltroMaestras OnChangepais="((int p) => this.valuepais = p)"
                    OnChangeempresa="((int e) => this.valueempresa = e)"
                    OnChangecentros="((int c) => this.valuecentros = c)"
                    OnChangedivision="((int d) => this.valuedivision = d)"
                    OnChangecentrosnombre="((string nc) => this.nombrecentro = nc)"
                    OnChangelineasnombre="((string nl) => this.nombrelinea = nl )"
                    OnChangelineas="((int l) => this.valuelinea = l)" />

    <RadzenRow class="rz-text-align-Left">

        <RadzenColumn>
            <div class="rz-p-sm-2 rz-text-align-left">
                <RadzenLabel Text="Consultar" />
                <RadzenButton Click=@(args => GetData()) Text="Consultar" Variant="Variant.Flat" Style="width: 100%; max-width: 250px; min-width: 150px;" Icon="check_circle" ButtonStyle="ButtonStyle.Success" />
            </div>
        </RadzenColumn>
    </RadzenRow>
    <p></p>
    @if (Cargando == 1)
    {
        @if (montos.Where(m => m.IdLineaNavigation.IdLinea == valuelinea).Any())
        {
            <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Nuevo Puesto" Click="@InsertRow" Disabled=@(puestoToInsert != null || puestoToUpdate != null) />

            <RadzenDataGrid @ref="@PuestosGrid" class="rz-shadow-2" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                            Data="@DataPuestos" TItem="PuesTrab" LogicalFilterOperator="LogicalFilterOperator.Or" OrOperatorText="O" AndOperatorText="Y" EqualsText="Igual a" IsLoading=@isLoading EditMode="DataGridEditMode.Single" RowUpdate="@OnUpdateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
                <Columns>

                    <RadzenDataGridColumn TItem="PuesTrab" Title="Línea" Frozen="true" Width="80px">
                        <Template>

                            @montos?.FirstOrDefault(m => m.IdLineaNavigation.IdLinea == valuelinea)?.IdLineaNavigation.Lnom


                        </Template>
                        <EditTemplate Context="puestoedit">
                            @nombrelinea
                        </EditTemplate>

                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="PuesTrab" Title="Puesto" Frozen="true" Property="Ptnombre" Width="80px">
                        <Template>
                            @context.Ptnombre
                        </Template>
                        <EditTemplate Context="puestoedit">


                            <RadzenColumn>
                                <RadzenRequiredValidator Text="Campo requerido." Component="PtNombre" Popup=true Style="position: absolute" />
                                <RadzenTextArea @bind-Value="puestoedit.Ptnombre" Name="PtNombre" class="w-100 rz-p-sm-2" />
                            </RadzenColumn>
                        </EditTemplate>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="PuesTrab" Title="Descripción" Property="Ptdescri" Width="160px">
                        <Template>
                            @context.Ptdescri
                        </Template>

                        <EditTemplate Context="puestoedit">

                            <RadzenRequiredValidator Text="Campo requerido." Component="PtDescri" Popup=true Style="position: absolute" />
                            <RadzenTextArea @bind-Value="puestoedit.Ptdescri" Name="PtDescri" class="w-100" />

                        </EditTemplate>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="PuesTrab" Title="Estado" Property="Ptesta" Width="80px">
                        <Template>
                            @if (context.Ptesta == true)
                            {
                                <p>Activo</p>
                            }
                            else
                            {
                                <p>Inactivo</p>
                            }
                        </Template>

                        <EditTemplate Context="puestoedit">
                            <RadzenSelectBar @bind-Value=puestoedit.Ptesta Size="ButtonSize.Medium" TValue="bool?" class="w-100 rz-text-align-center">
                                <Items>
                                    <RadzenSelectBarItem Text="Activo" Value="true" />
                                    <RadzenSelectBarItem Text="inactivo" Value="false" />
                                </Items>
                            </RadzenSelectBar>
                        </EditTemplate>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="PuesTrab" Context="puestoedit" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="40px">
                        <Template Context="puestoedit">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(puestoedit))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>

                        <EditTemplate Context="puestoedit">

                            @if (agregar == false)
                            {
                                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(puestoedit))">
                                </RadzenButton>
                            }
                            else
                            {
                                <RadzenButton Icon="save" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click=@(args => SaveRow(puestoedit))>
                                </RadzenButton>
                            }
                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(puestoedit))">
                            </RadzenButton>

                        </EditTemplate>
                    </RadzenDataGridColumn>

                </Columns>
            </RadzenDataGrid>
        }
        else
        {
            <RadzenText>
                Consulte la línea...
            </RadzenText>
        }
    }
    else if (Cargando == 2)
    {
        <div class="spinner"></div>
    }
    else
    {

    }
}
else if (Operacion == 2)
{
    @if (!puestostotales.Any())
    {
        <RadzenColumn>
            <div class="rz-p-sm-2 rz-text-align-left">
                <RadzenButton Click=@(args => GetDataPuesto()) Text="Actualizar listado de Puestos" Variant="Variant.Flat" Style="width: 100%; max-width: 250px; min-width: 150px;" Icon="check_circle" ButtonStyle="ButtonStyle.Success" />
            </div>
        </RadzenColumn>

    }
    else if (puestostotales.Any() && cargandopuestos == false)
    {
        @*Muestra lista de puestos para consultar en cuantas lineas se registro*@
        <RadzenRow class="rz-text-align-Left">
            <RadzenColumn>

                <div class="rz-p-sm-4 rz-text-align-left m-2">
                    <RadzenLabel Text="Puesto de Trabajo:" />
                    <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                                    TValue="int" Data=puestostotales TextProperty="Ptnombre" ValueProperty="IdPuesTrab" AllowClear="true" @bind-Value=IdPuestoReplica Style="width: 100%; max-width: 350px;min-width: 90px;" Change=SetPuesto SearchTextChanged="@(args => searchTextChanged(args))">
                    </RadzenDropDown>
                </div>
            </RadzenColumn>
        </RadzenRow>


        @if (montospuesto != null && puestostotales.Any())
        {
            @*Mostrar lista de centro-division-linea para agregar al puesto*@
            <h5 class="m-3">Seleccione la Línea de Producción a Replicar el Puesto:</h5>
            <FiltroMaestras OnChangepais="((int p) => this.valuepais = p)"
                            OnChangeempresa="((int e) => this.valueempresa = e)"
                            OnChangecentros="((int c) => this.valuecentros = c)"
                            OnChangedivision="((int d) => this.valuedivision = d)"
                            OnChangecentrosnombre="((string nc) => this.nombrecentro = nc)"
                            OnChangelineasnombre="((string nl) => this.nombrelinea = nl )"
                            OnChangelineas="((int l) => this.valuelinea = l)" />


            <RadzenColumn>
                <div class="rz-p-sm-2 rz-text-align-left">
                    <RadzenButton Click=@(args => AgregarLineaPuesto()) Text="Agregar" Variant="Variant.Flat" Style="width: 100%; max-width: 250px; min-width: 150px;" Icon="save" Visible="valuelinea>0" ButtonStyle="ButtonStyle.Success" />
                </div>
            </RadzenColumn>

            @*Mostrar data Grid*@
            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="20" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                            Data="@DataMontos" TItem="Monto" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
                <Columns>
                    <RadzenDataGridColumn TItem="Monto" Property="IdLineaNavigation.Lnom" Title="Línea" Frozen="true" Width="160px">
                        <Template Context="data">
                            @data.IdLineaNavigation.Lnom
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Monto" Property="IdPuesTrabNavigation.Ptnombre" Title="Puesto" Frozen="true" Width="160px">
                        <Template Context="data">
                            @data.IdPuesTrabNavigation.Ptnombre
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Monto" Property="IdPuesTrabNavigation.Ptdescri" Title="Descripción" Frozen="true" Width="160px">
                        <Template Context="data">
                            @data.IdPuesTrabNavigation.Ptdescri
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        }
        else if (montospuesto is null & puestostotales is not null & cargandopuestos == true)
        {
            <div class="spinner"></div>
        }

    }
    else
    {
        <div class="spinner"></div>
    }
}

@code {
    [CascadingParameter]
    private List<Claim> claims { get; set; }

    //parametros retornado en el componente Hijo FiltroMaestra
    public int valuepais { get; set; } = 0;
    public int valueempresa { get; set; } = 0;
    public int valuecentros { get; set; } = 0;
    public int valuedivision { get; set; } = 0;
    public int valuelinea { get; set; } = 0;
    public string? nombrecentro { get; set; } = null;
    public string? nombrelinea { get; set; } = null;

    RadzenDataGrid<PuesTrab> PuestosGrid;
    //RadzenDataGrid<Monto> MontosGrid;
    RadzenDropDown<int> centroselect;

    List<Monto> montos = new List<Monto>();
    List<PuesTrab> puestos = new List<PuesTrab>();//Puestos segun linea seleccionada
    List<PuesTrab> puestostotales = new List<PuesTrab>();//todos los puestos.
    List<Monto> montospuesto { get; set; }//todos los puestos.
    List<TipIncen> tipincen = new List<TipIncen>();
    List<TipSuple> tipsuples = new List<TipSuple>();
    List<Personal> personal = new List<Personal>();
    List<Resuman> resumen { get; set; }



    Dictionary<string, bool> permisos = new Dictionary<string, bool>();
    public string? roleClaim { get; set; } //guardar el rol del usuario
    public string? Ficha { get; set; } //guardar el rol del usuario



    IEnumerable<PuesTrab> DataPuestos;
    IEnumerable<Monto> DataMontos;


    int Operacion = 0;// 1-registrar puesto nuevo en celda. 2-asignar pusto a varias lineas
    int IdPuestoReplica { get; set; }// id del puesto a replicar en varias celdas

    int nuevopuesto { get; set; }//guarda el id del nuevo puesto de trabajo.
    DateTime fecha = DateTime.Now;//fecha seleccionada


    bool isLoading = false;
    bool agregar = false;//cambiar el icono del boton de guardar
    bool cargandopuestos = false;//cmostrar carga de equipos segun linea
    int Cargando = 0; //valida si se agrega resumen

    private string UsrAdmin { get; set; } = ""; //permisos de admin
    private string UsrRol { get; set; } = ""; //rol para filtrar

    PuesTrab puestoToInsert;
    PuesTrab puestoToUpdate;


    protected override async Task OnInitializedAsync()
    {
        await CreateData();
        permisos = RolLogicService.ListasRol(roleClaim);
    }

    private async Task CreateData()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        claims = Enumerable.ToList(user.Claims);
        roleClaim = claims.FirstOrDefault(c => c.Type.Contains("role"))?.Value;
        Ficha = claims.FirstOrDefault(c => c.Type.Equals("Ficha"))?.Value;
    }


    async Task SetPuesto()
    {
        await GetDataLineaPuesto();

    }
    void searchTextChanged(string text)
    {
        StateHasChanged();
    }

    //Edita los id y los puestos/suplencia en la lista
    async Task EditRow(PuesTrab puestoedit)
    {
        puestoToUpdate = puestoedit;
        await PuestosGrid.EditRow(puestoedit);
    }

    //Actualizar los valores de la lista segun el edit en el datagrid TODO;Optimizar codigo.
    void OnUpdateRow(PuesTrab puestoedit)
    {
        puestoToUpdate = null;
    }

    async Task SaveRow(PuesTrab puestoedit)
    {
        if (puestoedit.IdPuesTrab > 0)
        {
            try
            {
                await PuestosGrid.UpdateRow(puestoedit);
                await PuestosTrabajosService.UpdatePuestoTrabajo(puestoedit);
                await ActualizarData();
            }
            catch
            {

            }

        }
        else if (!String.IsNullOrEmpty(puestoedit.Ptdescri) & !String.IsNullOrEmpty(puestoedit.Ptnombre))
        {
            //insertar el puesto
            try
            {
                nuevopuesto = await PuestosTrabajosService.InsertarPuestoTrabajo(puestoedit);
            }
            catch
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Style = "position: relative;",
                        Duration = 40000,
                        Summary = "No se completó el cambio",
                        Detail = "No se logró actualizar el puesto, si el problema persiste contacte al desarrollador."

                    });
                nuevopuesto = 0;
            }

            //Insertar monto (escalon 0)
            if (nuevopuesto > 0)
            {

                await InsertarMontoCero(nuevopuesto);

            }

            await PuestosGrid.UpdateRow(puestoedit);//Agregar la columna a la lista del datag
            puestoToInsert = null;
            await ActualizarData();

        }
        else
        {
            await PuestosGrid.UpdateRow(puestoedit);
        }

    }


    void CancelEdit(PuesTrab puestoedit)
    {
        if (puestoedit == puestoToInsert)
        {
            puestoToInsert = null;
        }

        puestoToUpdate = null;
        PuestosGrid.CancelEditRow(puestoedit);
        agregar = false;

    }

    void Reset()
    {
        puestoToInsert = null;
        puestoToUpdate = null;
    }
    async Task InsertRow()
    {
        agregar = true;
        puestoToInsert = new PuesTrab();
        await PuestosGrid.InsertRow(puestoToInsert);
    }



    private async Task GetData()
    {
        Cargando = 2;
        Reset();
        //validar que se selecciono una linea
        if (valuelinea > 0)
        {
            try
            {
                montos = await MontosService.GetMontosxLinea(valuelinea);
                puestos = await PuestosTrabajosService.GetPuestosTrabajo(valuelinea);
                DataPuestos = puestos;
                Cargando = 1;

            }
            catch (Exception ex)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Style = "position: relative;", Duration = 40000, Summary = "Error en consultar la información del área", Detail = ex.Message });
                Cargando = 0;

            }
        }
        else
        {
            //Mostrar mensaje para sellecionar linea
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Duration = 40000, Summary = "Seleccione una línea.", Detail = "Por favor seleccione la línea a consultar." });
            Cargando = 0;
        }

    }

    //Obtener todos los puestos
    private async Task GetDataPuesto()
    {
        try
        {
            cargandopuestos = true;
            StateHasChanged();
            puestostotales = await PuestosTrabajosService.GetAllPuestosTrabajo();
            valuecentros = 0;
            valuedivision = 0;
            valuelinea = 0;

            cargandopuestos = false;
        }
        catch (Exception ex)
        {
            cargandopuestos = false;
            puestostotales = null;
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Style = "position: relative;",
                    Duration = 40000,
                    Summary = "Error en consultar los puestos de trabajo puesto",
                    Detail = ex.Message
                });

        }
    }

    //obtner las lineas donde registro el puesto
    private async Task GetDataLineaPuesto()
    {
        try
        {
            cargandopuestos = true;
            montospuesto = await PuestosTrabajosService.GetLineasPuestosTrabajo(IdPuestoReplica);
            DataMontos = montospuesto;
            //SetDivision();
            cargandopuestos = false;
        }
        catch (Exception ex)
        {
            cargandopuestos = false;
            montospuesto = null;
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Style = "position: relative;",
                    Duration = 40000,
                    Summary = "Error en consultar las lineas asociadas al puesto",
                    Detail = ex.Message
                });

        }
    }
    //Agregar lineas a un puesto

    private async Task AgregarLineaPuesto()
    {
        string result = "";
        try
        {
            result = await InsertarMontoCero(IdPuestoReplica);

            if (result == "success")
            {

                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Style = "position: relative;",
                        Duration = 40000,
                        Summary = "Registro Exitoso",
                        Detail = "Registro Exitoso"
                    });
            }
            else if (result == "existe")
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Info,
                        Style = "position: relative;",
                        Duration = 40000,
                        Summary = "Ya existe el Puesto en la Línea",
                    });
            }

            await GetDataLineaPuesto();
        }
        catch (Exception ex)
        {
            cargandopuestos = false;
            montospuesto = null;
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Style = "position: relative;",
                    Duration = 40000,
                    Summary = "Error al Insertar",
                    Detail = ex.Message
                });

        }
    }
    //Inserta el monto cero de un puesto nuevo o a una linea nueva
    private async Task<string> InsertarMontoCero(int Puesto)
    {

        try
        {
            Monto montonuevo = new Monto();
            montonuevo.IdLinea = valuelinea;
            montonuevo.IdPuesTrab = Puesto;
            montonuevo.Mescalon = 0;
            montonuevo.Mmonto = 0;
            montonuevo.MfecAct = DateTime.Now;
            montonuevo.Muser = "Javier Taborda";
            montonuevo.Mesta = true;
            return await MontosService.InsertarMontosPuesto(montonuevo);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Style = "position: relative;",
                    Duration = 40000,
                    Summary = "No se completó el registro",
                    Detail = ex.Message

                });
            return "Error";

        }

    }
    private async Task ActualizarData()
    {
        //Actualizar listas y actualizar DataG
        isLoading = true;
        montos = await MontosService.GetMontosxLinea(valuelinea);
        puestos = await PuestosTrabajosService.GetPuestosTrabajo(valuelinea);
        DataPuestos = puestos;

        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Style = "position: relative;",
                Duration = 40000,
                Summary = "Registro Exitoso",
                Detail = "Registro Exitoso"
            });

        isLoading = false;
        agregar = false;
    }

}

@inject AuthenticationStateProvider AuthStateProvider
@inject NotificationService NotificationService
@inject IResumen ResumenService


<RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Stretch">
    @if (!mostrarCuadroDeTexto)
    {
        <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        AllowFiltering="true"
                        TValue="int"
                        LoadData=@LoadData  
                        TextProperty="PeFicha" Data=@personalselect ValueProperty="IdPersonal" AllowClear="false" @bind-Value=idPersonal
                        Style="width: 100%; max-width: 350px;min-width: 90px;">

            <Template Context="item">
                @(new MarkupString($"{item.PeFicha} - {item.PeNombre} {item.PeApellido}"))
            </Template>
        </RadzenDropDown>

        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" Wrap="FlexWrap.Wrap">
            <RadzenButton Icon="person" ButtonStyle="ButtonStyle.Primary" Click="@MostrarSelectTotal" Text="Personal de Línea" Visible=TipoSelect />
            <RadzenButton Icon="group_add" ButtonStyle="ButtonStyle.Secondary" Click="@MostrarSelectTotal" Text="Personal Total" Visible=!TipoSelect />
            <RadzenButton Icon="search" ButtonStyle="ButtonStyle.Info" Text="Trabajador Sin Marcaje" Click="@MostrarCuadroTexto" />
        </RadzenStack>

    }
    else
    {
        <RadzenTextBox @bind-Value="FichaConsultada" Placeholder="Ficha..." Style="width: 100%; max-width: 350px;min-width: 90px; " />
        <div class="col-md-2">
            <RadzenButton Icon="search" Style="width:100%" Text="Buscar Ficha" Click=@(args => BuscarFicha()) />
        </div>
        <div class="col-md-2">
            <RadzenButton Icon="cached" Style="width:100%" Text="Cambiar a Lista" ButtonStyle="ButtonStyle.Info" Click="@MostrarCuadroTexto" />
        </div>

    }


</RadzenStack>
@if (resultadoBusqueda.IdPersonal > 0 && mostrarCuadroDeTexto)
{

    <RadzenCard Style="max-width: 500px;" class="m-3 pt-4">
        <h6 class="h5">Información del Trabajador</h6>
        <div class="d-flex flex-row align-items-center">
            <RadzenIcon Icon="person" Size="IconSize.XLarge" IconColor="@Colors.SuccessDark" Class="mr-3" Style="font-weight: 500;font-size: 52px;" />
            <div>
                <div>Nombre del Trabajador</div>
                <b>@resultadoBusqueda.PeNombre @resultadoBusqueda.PeApellido</b>
                <div class="mt-3">Ficha</div>
                <b>@resultadoBusqueda.PeFicha </b>
                <div class="mt-3">Puesto Estándar</div>
                <b>@resultadoBusqueda?.Plantillas?.FirstOrDefault()?.Ppuesto en @resultadoBusqueda?.Plantillas?.FirstOrDefault()?.Plinea </b>
            </div>
        </div>
    </RadzenCard>

}
<RadzenStack Orientation="Orientation.Horizontal" class="pt-5">

    <RadzenButton Click=@(args => Insertar()) Text="Registrar" Icon="check_circle" ButtonStyle="ButtonStyle.Success" />
    <RadzenButton Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Warning" Icon="close_fullscreen" Text="Cerrar" Click="@(_ => Service.CloseSide(null))" />

</RadzenStack>


@code {

    [CascadingParameter]
    private IEnumerable<Claim>? claims { get; set; }

    [Inject] DialogService Service { get; set; }

    [Parameter]
    public List<Personal>? personalfinal { get; set; }
    [Parameter]
    public int idPersonal { get; set; }
    [Parameter]
    public int idLinea { get; set; }

    public List<Personal>? personalselect;
    public List<Personal>? personalselectAll;
    Personal resultadoBusqueda = new Personal();
    private bool mostrarCuadroDeTexto = false;
    private bool TipoSelect = true;
    private string? FichaConsultada;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            MostrarSelectTotal();

        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error inesperado.", ex.Message);
        }
    }

    void MostrarCuadroTexto()
    {
        if (!mostrarCuadroDeTexto)
        {
            resultadoBusqueda = new Personal();
            idPersonal = 0;
            FichaConsultada = "";
            mostrarCuadroDeTexto = true;
        }
        else
        {
            mostrarCuadroDeTexto = false;
        }
    }

    void MostrarSelectTotal()
    {
        if (!TipoSelect)
        {
            TipoSelect = true;
            personalselect = personalfinal?.OrderBy(i => i.PeFicha).ToList();
            personalselectAll = personalselect?.ToList() ?? new List<Personal>();
            StateHasChanged();
        }
        else
        {
            TipoSelect = false;
            personalselect = personalfinal?
                .Where(l => l.Plantillas.Any(il => il.PidLinea == idLinea) ||
                l.Plantillas.Any(il => il.PidLinea == null))
                .OrderBy(i => i.PeFicha).ToList();

            personalselectAll = personalselect?.ToList() ?? new List<Personal>();
            StateHasChanged();
        }
    }


    private void Insertar()
    {
        if (idPersonal > 0)
        {
            bool ValidacionTempus = (resultadoBusqueda.IdPersonal == 0);     
            Service.CloseSide((idPersonal, ValidacionTempus, resultadoBusqueda));
        }
        else
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Seleccione una Ficha Válida.", "", 30000);
        }
    }
 

    private async Task BuscarFicha()
    {

        try
        {
            if (!string.IsNullOrEmpty(FichaConsultada))
            {
                resultadoBusqueda = await ResumenService.GetPersonalSinTempus(FichaConsultada);
                if (resultadoBusqueda.IdPersonal > 0)
                {
                    idPersonal = resultadoBusqueda.IdPersonal;
                }
                else
                {
                    NotificationService.Notify(NotificationSeverity.Warning, "No se encuentra registrada la ficha consultada.", "Por favor, verifique el número de ficha e intente de nuevo.", 30000);
                }
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Warning, "Seleccione una Ficha Válida.", "", 30000);
            }

        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Ocurrió un error, intente de nuevo.", "", 30000);

        }

    }

    void LoadData(LoadDataArgs args)
    {

        if (!string.IsNullOrEmpty(args.Filter))
        {
            personalselect = personalselectAll?.Where(c => c.PeFicha.ToLower().Contains(args.Filter.ToLower()) || 
                                                    c.PeNombre.ToLower().Contains(args.Filter.ToLower()) || 
                                                    c.PeApellido.ToLower().Contains(args.Filter.ToLower()) ).ToList();
            InvokeAsync(StateHasChanged);
        }
        if(args.Filter == ""){
            personalselect = personalselectAll?.ToList() ?? new List<Personal>();
            InvokeAsync(StateHasChanged);
        }
    }
}

@page "/sinmarcaje"
@inject NotificationService NotificationService
@inject AuthenticationStateProvider AuthStateProvider
@inject DialogService DialogService

@inject IResumen ResumenService
@inject IMaestraData MaestraService
@inject IRolLogic RolLogicService

@* @attribute [Authorize(Roles = "Admin, Superuser, UserCentroOperaciones")] *@
<h3>Personal con Problemas de Tempus</h3>
<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.End" JustifyContent="JustifyContent.Normal" Wrap="FlexWrap.NoWrap" Style=" width: 100%; ">

    @if (valueempresas > 0 && (centros is not null || !string.IsNullOrEmpty(nombrecentro)))
    {
        <div>
            <RadzenLabel Text="Centros" />
            @if (!string.IsNullOrEmpty(nombrecentro))
            {
                <RadzenTextBox @bind-Value="nombrecentro" ReadOnly="true" Style="width: 100%; max-width: 350px;min-width: 90px;" />
            }
            else
            {
                <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
                                TValue="int" Data=centros TextProperty="Centro" ValueProperty="IdCentro" AllowClear="false" @bind-Value=valuecentros Style="width: 100%; max-width: 350px;min-width:100px;">
                </RadzenDropDown>
            }
        </div>

    }
    else if (centros is null)
    {
        <CargandoSelect />
    }
    <div>
        <RadzenLabel Text="Fecha de Inicio" />
        <RadzenDatePicker TValue="DateTime?" Value=@F1 DateFormat="dd/MM/yyyy" Change="@(args => F1 = args)" Style="width: 100%; max-width: 350px;min-width: 90px;" />
    </div>
    <div>
        <RadzenLabel Text="Fecha Final" />
        <RadzenDatePicker TValue="DateTime?" Value=@F2 DateFormat="dd/MM/yyyy" Change="@(args => F2 = args)" Style="width: 100%; max-width: 350px;min-width: 90px;" />
    </div>
    <div>
        <RadzenButton Text="Consultar Puestos" Icon="manage_search" ButtonStyle="ButtonStyle.Success" Click=@ConsultarResumen />
    </div>
</RadzenStack>


@if (resumen.Any())
{
    <br />
@*     <RadzenText class="p-4">Apruebe dando click al botón aprobar: </RadzenText> *@
    <RadzenDataGrid Data="@resumen" AllowColumnResize=true TItem="Resuman">
        <Columns>
         

            <RadzenDataGridColumn TItem="Resuman" Property="Rfecha" Title="Fecha" Width="10%">
                <Template>
                    @context?.Rfecha?.ToString("dd/MM/yyyy")
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Resuman" Property="Lnom" Title="Línea" Width="20%">
                <Template>
                    @context?.IdMontosNavigation?.IdLineaNavigation?.Lnom
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Resuman" Property="IdPersonal" Title="Puesto" Width="20%">
                <Template>
                    @context?.IdMontosNavigation?.IdPuesTrabNavigation?.Ptnombre
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Resuman" Property="IdPersonal" Title="Trabajador" Width="25%">
                <Template>
                    @context?.IdPersonalNavigation?.PeFicha
                    @context?.IdPersonalNavigation?.PeNombre
                    @context?.IdPersonalNavigation?.PeApellido
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Resuman" Property="IdPersonal" Title="Asignado Por" Width="15%">
                <Template>
                    @context?.RuserVali
                </Template>
            </RadzenDataGridColumn>
@*             <RadzenDataGridColumn TItem="Resuman" Property="IdPersonal" Title="Estado de Aprobación" Width="25%">
                <Template>
                    @{
                        if (@context?.RaproJef == true)
                        {
                            
                            // <RadzenButton ButtonStyle="ButtonStyle.Success" Click=@(args => AprobarResumen(context)) Text="Aprobado" Style="width: 100%;" />
                        }
                        else
                        {
                            <p>Personal fuera de lista de tempus.</p>
                            // <RadzenButton ButtonStyle="ButtonStyle.Danger" Click=@(args => AprobarResumen(context)) Text="Rechazado" Style="width: 100%;" />
                        }
                    }
                </Template>
            </RadzenDataGridColumn> *@

        </Columns>
    </RadzenDataGrid>

   @*  <div class="pt-4">
        <RadzenButton Text="Actualizar registros" Icon="save" ButtonStyle="ButtonStyle.Success" Click=@SaveResumen />
    </div> *@
}
else if (cargando)
{
    <Load></Load>
}
else if (consulta && !resumen.Any())
{
    <p class="p-4">No hay trabajadores con problemas de marcaje.</p>
}

@code {

    [CascadingParameter]
    private List<Claim> claims { get; set; }

    //parametros retornado en el componente Hijo FiltroMaestra
    public int valuepais { get; set; } = 0;
    public int valueempresas { get; set; } = 0;
    public int valuecentros { get; set; } = 0;

    public string? nombrecentro { get; set; } = null;

    public bool cargando = false;
    public bool consulta = false;

    public List<CentrosV>? centros { get; set; }

    Dictionary<string, bool> permisos = new Dictionary<string, bool>();
    public string? roleClaim { get; set; } //guardar el rol del usuario
    public DateTime? F1 = DateTime.Now;
    public DateTime? F2 = DateTime.Now;

    List<Resuman> resumen = new List<Resuman>();
    private async Task CreateData()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        claims = user.Claims.ToList();
        roleClaim = claims.FirstOrDefault(c => c.Type.Contains("role"))?.Value;
        valueempresas = int.Parse(claims.FirstOrDefault(c => c.Type.Equals("IdEmpresa")).Value);
    }


    protected override async Task OnInitializedAsync()
    {
        await CreateData();
        permisos = RolLogicService.ListasRol(roleClaim);
        await SetCentros();
    }
    private async Task ConsultarResumen()
    {
        try
        {
            consulta = false;
            cargando = true;
            StateHasChanged();
            resumen = await ResumenService.GetReumenSinAutorizar(F1, F2, valuecentros);
            cargando = false;
            consulta = true;
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Atención", "Ocurrión un error al consultar los datos.");
        }
    }

    private async Task SetCentros()
    {
        if (permisos["Empresa"])
        {
            if (valueempresas > 0)
            {
                centros = await MaestraService.GetCentros(valueempresas);
                valuecentros = 0;
            }
            else
            {
                valuecentros = 0;
            }
        }
        else
        {
            valuecentros = int.Parse(claims.FirstOrDefault(c => c.Type.Equals("IdCentro")).Value);
            nombrecentro = claims.FirstOrDefault(c => c.Type.Equals("Centro")).Value;

        }

    }
    private void AprobarResumen(Resuman resumen)
    {
        if (resumen.RaproJef == false)
        {
            resumen.RaproJef = true;
            NotificationService.Notify(NotificationSeverity.Success, "Aprobación:", $"Se ha aprobado al trabajador {resumen.IdPersonalNavigation.PeNombre} {resumen.IdPersonalNavigation.PeApellido}");
        }
        else
        {
            resumen.RaproJef = false;
            NotificationService.Notify(NotificationSeverity.Error, "Rachazar:", $"Se ha rechazado al trabajador {resumen.IdPersonalNavigation.PeNombre} {resumen.IdPersonalNavigation.PeApellido}");
        }
        resumen.RaprNom = $"{claims?.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value} {claims?.FirstOrDefault(c => c.Type.Contains("surname"))?.Value}";

    }
    private async Task SaveResumen()
    {

        cargando = true;

        foreach (var r in resumen)
        {
            r.IdPersonalNavigation = null;
            r.IdMontosNavigation = null;
            r.IdTipIncenNavigation = null;
            r.IdTipSupleNavigation = null;
        }

        var result = await ResumenService.UpdateResumen(resumen);
        if (result == "success")
        {
            NotificationService.Notify(NotificationSeverity.Success, "Cambios Guardados.", "");
            await ConsultarResumen();
        }
        else
        {
            NotificationService.Notify(NotificationSeverity.Error, "Ocurrió un error.", "Intente otra vez.");
        }
        cargando = false;

    }
}

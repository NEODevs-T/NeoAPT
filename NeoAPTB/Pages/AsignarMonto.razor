@* @page "/asignarmontos" *@

@inject NotificationService NotificationService
@inject AuthenticationStateProvider AuthStateProvider
@inject DialogService DialogService
@inject TooltipService tooltipService

@inject IResumen ResumenService
@inject IRolLogic RolLogicService
@inject ITempus TempusService
@inject IPersonal PersonalService

<FiltroMaestras OnChangepais="((int p) => this.valuepais = p)"
                OnChangeempresa="((int e) => this.valueempresa = e)"
                OnChangecentros="((int c) => this.valuecentros = c)"
                OnChangedivision="((int d) => this.valuedivision = d)"
                OnChangelineas="((int l) => this.valuelinea = l)" />

<RadzenRow>

    <div class="rz-p-sm-2 rz-text-align-left">
        <RadzenLabel Text="Grupo" /><br />
        <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                        Data=@Grupos TextProperty="Value" ValueProperty="Value" AllowClear="true" @bind-Value=valuegrupo Style="width: 90%; max-width: 100px;min-width: 70px;" SearchTextChanged="@(args => searchTextChanged(args))" />
    </div>

    <div class="rz-p-sm-2 rz-text-align-left">
        <RadzenLabel Text="Consultar" />
        <RadzenButton Click=@(args => GetData()) Text="Consultar" Variant="Variant.Flat" Style="width: 100%; max-width: 250px; min-width: 150px;" Icon="check_circle" ButtonStyle="ButtonStyle.Success" />
    </div>

</RadzenRow>

@if (AddResumen == 1)
{
    <RadzenText TextStyle="TextStyle.H6">Resumen del turno @turno grupo @valuegrupo </RadzenText>

    <RadzenCard Style=" padding: 0;" Class="rz-shadow-2 rz-mx-auto w-auto">

        <RadzenDataGrid Visible=@(AddResumen==1) Data="@ResumenInsertar" TItem="Resuman" @ref="@ResumenGrid"
                        AllowFiltering="true"
                        AllowColumnResize="true"
                        AllowAlternatingRows="false"
                        FilterMode="FilterMode.Advanced"
                        PagerHorizontalAlign="HorizontalAlign.Left"
                        ShowPagingSummary="true"
                        LogicalFilterOperator="LogicalFilterOperator.Or"
                        SelectionMode="DataGridSelectionMode.Single"
                        AllowSorting="true"
                        RowUpdate="@OnUpdateRow"
                        EditMode="DataGridEditMode.Single">

            <Columns>

                <RadzenDataGridColumn TItem="Resuman" Property="IdMontos" Title="Puesto" Sortable="false" Width="30%">
                    <Template Context="data">
                        @montos?.FirstOrDefault(m => m.IdMontos == data.IdMontos)?.IdPuesTrabNavigation.Ptnombre
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Resuman" Property="IdPersonal" Title="Personal" Sortable="false" Filterable=true Width="30%">
                    <Template Context="data">
                        @{
                            var personalInfo = personalLinea?.FirstOrDefault(f => f.IdPersonal == data?.IdPersonal);
                            var resumenInfo = resumenPersonal?.FirstOrDefault(f => f.IdPersonal == data?.IdPersonal)?.IdPersonalNavigation;

                            if (personalInfo != null)
                            {
                                <p>
                                    @personalInfo.PeFicha
                                    @personalInfo.PeNombre
                                    @personalInfo.PeApellido
                                </p>
                            }
                            else if (resumenInfo != null)
                            {
                                <p>
                                    @resumenInfo.PeFicha
                                    @resumenInfo.PeNombre
                                    @resumenInfo.PeApellido
                                </p>
                            }
                            else
                            {
                                <p>
                                    Sin Asignar
                                    <RadzenIcon Icon="warning" IconColor="@Colors.Warning" />
                                </p>
                            }

                        }

                    </Template>
                    <EditTemplate Context="data">
                        @if (data.IdPersonal > 0 && data != null)
                        {
                            <RadzenStack Orientation="Orientation.Horizontal" class="pt-1">
                                @{
                                    var personalInfo = personalLinea?.FirstOrDefault(f => f.IdPersonal == data?.IdPersonal);
                                    var resumenInfo = resumenPersonal?.FirstOrDefault(f => f.IdPersonal == data?.IdPersonal)?.IdPersonalNavigation;

                                    if (personalInfo != null)
                                    {
                                        <p>
                                            @personalInfo.PeFicha
                                            @personalInfo.PeNombre
                                            @personalInfo.PeApellido
                                        </p>
                                    }
                                    else if (resumenInfo != null)
                                    {
                                        <p>
                                            @resumenInfo.PeFicha
                                            @resumenInfo.PeNombre
                                            @resumenInfo.PeApellido
                                        </p>
                                    }
                                    else
                                    {
                                        <p>
                                            Sin Asignar
                                            <RadzenIcon Icon="warning" IconColor="@Colors.Warning" />
                                        </p>
                                    }
                                }

                                <div>

                                    <RadzenButton ButtonStyle="ButtonStyle.Warning" Icon="cleaning_services" Variant="Variant.Outlined"
                                                  Size="ButtonSize.Medium" Click="@((args) =>LimpiarPuestoTrabajador(data.IdPersonal))"
                                                  MouseEnter="@((args) => tooltipService.OpenOnTheTop(args, "Limpiar Puesto",
                                        new TooltipOptions{ Style = "background-color: var(--rz-warning-light); color:var(--rz-base-800);", Duration=1000}))" />
                                </div>
                            </RadzenStack>

                        }
                        else
                        {
                            <RadzenButton Icon="search" ButtonStyle="ButtonStyle.Success" Variant="Variant.Outlined" Size="ButtonSize.Medium" class="flex-item m-x-auto"
                                          Click="@((args) =>ShowDialogPersonalSelect(personalfinal,data))"
                                          MouseEnter="@((args) => tooltipService.OpenOnTheTop(args, "Buscar Trabajador",
                                        new TooltipOptions{ Style = "background-color: var(--rz-success-light); color:var(--rz-base-800);", Duration=1000}))" />

                        }

                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Resuman" Property="IdTipSuple" Title="Tipo de Suplencia" Sortable="false" Filterable=true Width="20%">
                    <Template Context="data">
                        @tipsuples?.FirstOrDefault(tp => tp.IdTipSuple.Equals(data.IdTipSuple))?.Tscausa
                    </Template>
                    <EditTemplate>
                        <RadzenDropDown @bind-Value="context.IdTipSuple" Data="tipsuples" TextProperty="Tscausa" ValueProperty="IdTipSuple" Style="width:100%; display: block;" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Resuman" Property="Rsuplido" Title="Ficha de Suplencia" Sortable="false" Filterable=true Width="10%">
                    <EditTemplate>
                        <RadzenTextBox Placeholder="Ficha..." @bind-Value="context.Rsuplido" class="w-100" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Resuman" Context="resume" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="10%">
                    <Template Context="resume">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(resume))" @onclick:stopPropagation="true">
                        </RadzenButton>
                        @if (ResumenInsertar.Where(id => id.IdMontos == (resume.IdMontos)).Count() > 1 && resume.IdPersonal == 0)
                        {
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => ConfirmDelete(resume))" />
                        }
                    </Template>

                    <EditTemplate Context="resume">
                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(resume))">
                        </RadzenButton>
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(resume))" aria-label="Cancel">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenDataGridColumn>

            </Columns>

        </RadzenDataGrid>

    </RadzenCard>

    <div class="rz-p-sm-4 rz-text-align-right">
        <RadzenButton Text="Duplicar Puesto" Icon="content_copy" ButtonStyle="ButtonStyle.Info" Click=@ShowDialogDuplicarPuesto />
        <RadzenButton Text="Guardar Puestos" Icon="save" ButtonStyle="ButtonStyle.Success" Click=@InsertResumenLinea />
    </div>
}

@if (AddResumen == 2 & tempusloading == false)
{
    <Load></Load>

}
@if (tempusloading == true)
{
    <p class="text-center">Cargando lista desde Tempus...</p>
    <div class="loader">
        <span class="hour"></span>
        <span class="min"></span>
        <span class="circel"></span>
    </div>
}

@code {
    [CascadingParameter]
    private List<Claim>? claims { get; set; }

    //parametros retornado en el componente Hijo FiltroMaestra
    public int valuepais { get; set; } = 0;
    public int valueempresa { get; set; } = 0;
    public int valuecentros { get; set; } = 0;
    public int valuedivision { get; set; } = 0;
    public int valuelinea { get; set; } = 0;
    public string? nombrecentro { get; set; } = null;
    public string? nombrelinea { get; set; } = null;

    RadzenDataGrid<Resuman> ResumenGrid = new RadzenDataGrid<Resuman>();

    Dictionary<string, bool> permisos = new Dictionary<string, bool>();
    public string? roleClaim { get; set; } //guardar el rol del usuario
    public string? Ficha { get; set; } //guardar el rol del usuario
    public string? RegistroUsuario { get; set; } //guardar datos del usuario para historicos.


    string? valuepersonal;
    string? valuegrupo;
    string? FichaExtra { get; set; }//ficha a agregar de  otra línea

    int? sinSuplenciaId { get; set; }
    int? bonoProduccionId { get; set; }

    int AddResumen = 0; //valida si se agrega resumen
    int turno { get; set; }


    bool isLoading = false;
    bool tempusloading = false;//valida si se cargan datos de tempus
    bool nuevopersonal = false;//valida si se cargan nuevo personal
    bool editaresumen = false;//valida si ya se cargo resumen para editar en vez de registrar

    List<TrabajadorEnPuestoV>? tempuslista;

    List<Personal>? personalLinea;//Lista de Personal Asignado a la Linea y en puesto asignado
    List<Personal>? personalfinal;//lista filtrada por tempus
    List<Personal>? personalnuevo;//personal en tempus que no esta registrado en la base de datos


    List<TipIncen> tipincen = new List<TipIncen>();
    List<TipSuple> tipsuples = new List<TipSuple>();
    List<Monto> montos = new List<Monto>();

    List<Resuman> resumenPersonal = new List<Resuman>();//personal en tempus de otras lineas o sobre tiempo
    List<Resuman> ResumenInsertar = new List<Resuman>();
    Resuman? resumeToUpdate;

    Dictionary<int, string> Grupos = new Dictionary<int, string>
            {
            { 1, "A" },
            { 2, "B" },
            { 3, "C" },
            { 4, "D" },
            { 5, "N" }
            };
    private async Task CreateData()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        claims = user.Claims.ToList();
        roleClaim = claims.FirstOrDefault(c => c.Type.Contains("role"))?.Value;
        Ficha = claims.FirstOrDefault(c => c.Type.Equals("Ficha"))?.Value;
        RegistroUsuario = $"{claims.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value} {claims.FirstOrDefault(c => c.Type.Contains("surname"))?.Value}";

    }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        if (claims == null || !claims.Any())
        {
            await CreateData();
        }
        permisos = RolLogicService.ListasRol(roleClaim);
        int hora = int.Parse(DateTime.Now.ToString("HHmmss"));
        turno = valuegrupo == "N" ? 0 : (hora >= 60000 && hora <= 180000) ? 1 : 2;
        isLoading = false;
    }
    void searchTextChanged(string text)
    {
        StateHasChanged();
    }

    private async Task CargarListas()
    {
        montos = await ResumenService.GetMontoPuesto(valuelinea);
        tipsuples = await ResumenService.GetTipoSuple();
        tipincen = await ResumenService.GetTipoInce();

        sinSuplenciaId = tipsuples?.FirstOrDefault(t => t.Tscausa.Contains("Sin Suplencia"))?.IdTipSuple;
        bonoProduccionId = tipincen?.FirstOrDefault(t => t.Tinombre.Contains("Bono Producción"))?.IdTipIncen;
    }
    private async Task GetData()
    {
        try
        {
            if (valuelinea > 0 && !string.IsNullOrEmpty(valuegrupo))
            {
                AddResumen = 2;
                //obtener resumen ya registrados para el dia
                resumenPersonal = await ResumenService.GetResumenxCentro(valuecentros, turno);
                var resumenlinea = resumenPersonal.Where(l => l.IdMontosNavigation.IdLinea.Equals(valuelinea));

                //TODO: Actualmente Se consulta el personal total de conversión a petición de los usuarios
                personalLinea = await PersonalService.GetPersonal(valuecentros, valuelinea, valuegrupo);
                await CargarTempus();
                if (personalnuevo?.Any() == true)
                {
                    List<Resuman> personlregistradohoy = await ResumenService.GetResumenFichas(DateTime.Now.Date);

                    if (personalnuevo?.Any() == true)
                    {
                        if (personlregistradohoy.Any())
                        {
                            var fichasRegistradasHoy = new HashSet<string>(personlregistradohoy?.Select(f => f.IdPersonalNavigation.PeFicha));
                            personalnuevo = personalnuevo.Where(p => !fichasRegistradasHoy.Contains(p.PeFicha)).ToList();
                        }
                    }
                    personalnuevo = await ResumenService.FiltarListaPersonalNuevo(personalnuevo);

                    if (personalnuevo.Count() > 0)
                    {
                        await ShowDialogAddNuevoPersonal(personalnuevo);
                    }
                }

                if (resumenlinea.Count() == 0 && personalnuevo?.Any() == false)
                {

                    await CargarListas();
                    ResumenInsertar = new List<Resuman>();
                    ResumenInsertar = montos.Select(m => CrearResumen(m, sinSuplenciaId, bonoProduccionId)).ToList();
                    AddResumen = 1;
                }
                //Si ya se cargo el personal del día se muestra la consulta de la línea.
                else if (resumenlinea.Count() > 0 & personalnuevo?.Count() == 0)
                {
                    NotificationService.Notify(NotificationSeverity.Success, "Ya se cargo personal el dia de hoy...", "", 10000);
                    ResumenInsertar = resumenlinea.ToList();
                    await CargarListas();
                    AddResumen = 1;
                }
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Warning, "Seleccione una línea.", "Por favor seleccione línea y grupo a consultar.", 40000);
                AddResumen = 0;
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error de Cargado", ex.Message, 40000);
            AddResumen = 0;
        }
    }

    private Resuman CrearResumen(Monto m, int? sinSuplenciaId, int? bonoProduccionId)
    {
        return new Resuman
            {
                IdMontos = m.IdMontos,
                IdPersonal = 0,
                IdTipSuple = sinSuplenciaId,
                Rfecha = DateTime.Now,
                Rturno = turno,
                Rgrupo = valuegrupo,
                Rsuplido = "",
                RuserVali = $"{claims?.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value} {claims?.FirstOrDefault(c => c.Type.Contains("surname"))?.Value}",
                RuserPago = "",
                IdTipIncen = bonoProduccionId,
                RaproJef = false,
                Rvalido = false

            };
    }

    async Task ShowDialogAddNuevoPersonal(List<Personal> personalnuevo)
    {
        await DialogService.OpenSideAsync<DialogAddPersonal>(
    "", parameters: new Dictionary<string, object?>()
          {
                    { "personalnuevo",personalnuevo},
                    {"valuecentros", valuecentros},
                    {"nombrecentro", nombrecentro}
          },

     options: new SideDialogOptions
        {
            Position = DialogPosition.Bottom,
            ShowMask = true,
            CloseDialogOnOverlayClick = false,
            Height = "85%"
        });
    }

    private async Task CargarTempus()
    {
        try
        {
            tempusloading = true;
            StateHasChanged();           

            tempuslista = await  TempusService.GetListaConversion(); 
            personalfinal = new List<Personal>();
            personalnuevo = new List<Personal>();

            //TODO: Debug this code 
            var personalDict = personalLinea?.ToDictionary(p => p.PeFicha, p => p);

            foreach (var ficharegistrada in resumenPersonal)
            {
                if (personalDict.TryGetValue(ficharegistrada.IdPersonalNavigation.PeFicha, out var value))
                {
                    var fichasEnTempus = tempuslista.Where(f => f.CodigoTrabajador.Substring(4).Equals(value.PeFicha)).ToList();
                    foreach (var ficha in fichasEnTempus)
                    {
                        tempuslista.Remove(ficha);
                    }
                }
            }

            foreach (var f in tempuslista)
            {
                string fichatempus = f.CodigoTrabajador.Substring(4);
                if (personalDict.TryGetValue(fichatempus, out var personalExistente))
                {
                    if (!personalfinal.Any(p => p.PeFicha.Contains(fichatempus)))
                    {
                        personalfinal.Add(personalExistente);
                        personalLinea.Remove(personalExistente);
                    }
                }
                else
                {
                    if (!personalfinal.Any(p => p.PeFicha == fichatempus) && !personalnuevo.Any(p => p.PeFicha == fichatempus))
                    {
                        Personal nuevo = CrearPersonal(f);
                        personalnuevo.Add(nuevo);
                    }
                }
            }
            personalLinea = new List<Personal>();
            tempusloading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            tempusloading = false;
            NotificationService.Notify(NotificationSeverity.Warning, "Error en consultar la información del área", $"{ex.Message}");
        }

    }

    private async Task<List<TrabajadorEnPuestoV>> LimpiarDataTempus()
    {
        var lista = await TempusService.GetListaConversion();
        return lista ??  new List<TrabajadorEnPuestoV>();

    }

    private Personal CrearPersonal(TrabajadorEnPuestoV f)
    {
        string[] nombre = f.NombreTrab.Split(". ");
        Personal nuevo = new Personal
            {
                PeFicha = f.CodigoTrabajador.Substring(4),
                PeNombre = nombre.Length > 1 ? nombre[1] : f.NombreTrab,
                PeApellido = nombre.Length > 1 ? nombre[0] + "." : "",
                PeEstado = true,
                PeGrupo = valuegrupo
            };
        return nuevo;
    }


    private async Task InsertResumenLinea()
    {
        try
        {

            if (!await ValidarPersonalAsignadoyVacio(ResumenInsertar))
            {
                return;
            }

            List<int> personalRegistrado = await ResumenService.CheckResumen(DateTime.Now, valuecentros, turno);

            var personalyaregistradohoy = ResumenInsertar.Where(f => personalRegistrado.Contains(f.IdPersonal)).ToList();
            //TODO:LLamar metodo solo para insertar y uno para editar e insertar  si ya hay personal en otra linea
            if (personalyaregistradohoy.Any())
            {
                NotificationService.Notify(NotificationSeverity.Warning, "Atención", "El siguiente personal ya está asignado.");
                bool result = await MostrarDialogPersonalYaRegistrado(personalyaregistradohoy);
                if (!result)
                {
                    ResumenInsertar = ResumenInsertar.Except(personalyaregistradohoy).ToList();
                }
            }

            if(ResumenInsertar.Count>0)
            {
                await ResumenService.InsertyUpdateResumen(ResumenInsertar);
                NotificationService.Notify(NotificationSeverity.Success, "Creación Exitosa", "Se agregó el puesto.");              
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Warning, "La lista de Personal esta vacía.", "Por favor, consulte nuevamente.");
               
            }   
            AddResumen = 0;

        }
        catch (Exception ex)
        {

            NotificationService.Notify(NotificationSeverity.Error, "Ocurrió un error", ex.Message);
        }
    }

    private async Task<bool> ValidarPersonalAsignadoyVacio(List<Resuman> resumenAInsertar)
    {
        var listaIdPersonal = resumenAInsertar.Select(r => r.IdPersonal).ToList();

        if (listaIdPersonal.Any(id => id == 0))
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Atención", "Hay puestos sin personal.");
            return false;
        }
        var idsUnicos = listaIdPersonal.Distinct().ToList();
        if (idsUnicos.Count != listaIdPersonal.Count)
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Atención", "Hay puestos con el mismo trabajador.");
            return false;
        }
        return true;
    }

    async Task<bool> MostrarDialogPersonalYaRegistrado(List<Resuman> personalYaRegistrado)
    {
        var resultDialog = await DialogService.OpenAsync<DialogPersonalYaRegistrado>("",
        parameters: new Dictionary<string, object?>()
                                                    {
            { "PersonalList", personalYaRegistrado}
                                                    },
        options: new DialogOptions
            {
                CloseDialogOnOverlayClick = false,
                ShowClose = false,
                Height = "50%",
                Width = "60%"
            });
        return resultDialog;
    }

    async Task ShowDialogDuplicarPuesto()
    {
        var resultDialog = await DialogService.OpenAsync<DialogDuplicarPuesto>("",
            parameters: new Dictionary<string, object?>()
                                                    {
            { "montos", montos }
                                                    },
            options: new DialogOptions
                {
                    CloseDialogOnOverlayClick = false,
                    ShowClose = false,
                    Height = "50%",
                    Width = "40%"
                });

        if (resultDialog is (Monto monto, int cantidad))
        {
            for (int i = 0; i < cantidad; i++)
            {
                var resumen = CrearResumen(monto, sinSuplenciaId, bonoProduccionId);
                ResumenInsertar.Add(resumen);
                await ResumenGrid.InsertRow(resumen);
                await ResumenGrid.UpdateRow(resumen);
            }
            NotificationService.Notify(NotificationSeverity.Success, "Creación Exitosa", "Se agregó el puesto.");
        }
    }


    async Task ShowDialogPersonalSelect(List<Personal> p, Resuman r)
    {
        (int idSeleccionado, bool validacionTempus, Personal sinTempus) = (0, false, new Personal());

        var resultDialog = await DialogService.OpenSideAsync<PersonalSelect>(
    "", parameters: new Dictionary<string, object?>()
                                                                                                                    {
                    { "personalfinal",p},
                    {"idPersonal", r.IdPersonal},
                    {"idLinea", valuelinea},

                                                                                                                    },
           options: new SideDialogOptions
               {
                   Position = DialogPosition.Bottom,
                   ShowMask = true,
                   CloseDialogOnOverlayClick = false,
                   ShowClose = false,
                   Height = "60%"
               });

        if (resultDialog is (int, bool, Personal))
        {
            (idSeleccionado, validacionTempus, sinTempus) = ((int, bool, Personal))resultDialog;
        }
        if (idSeleccionado > 0)
        {
            r.IdPersonal = idSeleccionado;
            r.RaproJef = validacionTempus;

            ActualizarListas(validacionTempus, sinTempus, idSeleccionado);
        }
    }

    private void ActualizarListas(bool validacionTempus, Personal sinTempus, int idSeleccionado)
    {

        if (!validacionTempus)
        {
            personalLinea?.Add(sinTempus);
        }
        else
        {
            var personalSeleccionado = personalfinal?.FirstOrDefault(id => id.IdPersonal == idSeleccionado);
            if (personalSeleccionado != null)
            {
                personalLinea?.Add(personalSeleccionado);
                personalfinal?.Remove(personalSeleccionado);
            }
        }
    }
    private void LimpiarPuestoTrabajador(int idSeleccionado)
    {
        var addpersonalfinal = personalLinea?.FirstOrDefault(p => p.IdPersonal == idSeleccionado);
        var limpiarresumen = ResumenInsertar.FirstOrDefault(r => r.IdPersonal == idSeleccionado);

        if (limpiarresumen != null)
        {
            limpiarresumen.IdPersonal = 0;
            limpiarresumen.Rvalido = false;
            limpiarresumen.RaproJef = false;
            limpiarresumen.RuserVali = "";
        }

        if (addpersonalfinal != null)
        {
            personalfinal?.Add(addpersonalfinal);
            personalLinea?.Remove(addpersonalfinal);
        }
    }
    async Task ConfirmDelete(Resuman resume)
    {
        bool? result = await DialogService.Confirm("¿Estás seguro de que quieres eliminar este registro?", "Confirmar Eliminación",
        new ConfirmOptions()
            { OkButtonText = "Eliminar", CancelButtonText = "Cancelar" });
        if (result == true)
        {
            await DeleteRow(resume);
        }
    }
    async Task DeleteRow(Resuman resume)
    {
        if (ResumenInsertar.Contains(resume))
        {
            ResumenInsertar.Remove(resume);
            await ResumenGrid.Reload();
        }
    }

    async Task EditRow(Resuman resume)
    {
        resumeToUpdate = resume;
        await ResumenGrid.EditRow(resume);
    }

    async Task SaveRow(Resuman resume)
    {
        await ResumenGrid.UpdateRow(resume);
    }

    void CancelEdit(Resuman resume)
    {
        resumeToUpdate = null;
        ResumenGrid.CancelEditRow(resume);
    }

    public async Task OnUpdateRow(Resuman resume)
    {
        if (resume.IdPersonal > 0)
        {
            int? suplencia = tipsuples?.FirstOrDefault(t => t.Tscausa.Contains("Sin Suplencia"))?.IdTipSuple;

            bool isSuplenciaValid = (suplencia != resume.IdTipSuple && !string.IsNullOrEmpty(resume.Rsuplido)) ||
                                    (suplencia == resume.IdTipSuple && string.IsNullOrEmpty(resume.Rsuplido));

            if (isSuplenciaValid)
            {
                var resu = ResumenInsertar.First(r => r.IdMontos == resume.IdMontos) == resume;
                resume.RuserVali = RegistroUsuario;

                resumeToUpdate = null;
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Warning, "Atención", "Debe colocar la ficha del personal suplido.");
                await EditRow(resume);
            }
        }
        else
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Atención", "Debe seleccionar el personal del puesto de trabajo.");
            await EditRow(resume);
        }
    }

}

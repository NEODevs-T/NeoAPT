@* @page "/asignarpuesto" *@


@inject DialogService DialogService
@inject NotificationService NotificationService
@inject AuthenticationStateProvider AuthStateProvider

@inject IPersonal PersonalService
@inject IMontos MontosService
@inject IPuestosTrabajo PuestosTrabajoslService
@inject IResumen ResumenService
@inject IMaestraData MaestraService
@inject ITempus TempusService
@inject IRolLogic RolLogicService
@* @attribute [Authorize(Roles = "Admin, SupIntendente, SupIntendenteGeneral, SuperAdmin, Supervisor")]
 *@
<h3>Asignar Puestos de Trabajo</h3>



<FiltroMaestras OnChangepais="((int p) => this.valuepais = p)"
                OnChangeempresa="((int e) => this.valueempresa = e)"
                OnChangecentros="((int c) => this.valuecentros = c)"
                OnChangedivision="((int d) => this.valuedivision = d)"
                OnChangecentrosnombre="((string nc) => this.nombrecentro = nc)"
                OnChangelineasnombre="((string nl) => this.nombrelinea = nl )"
                OnChangelineas="((int l) => this.valuelinea = l)" />


<RadzenRow>

    <div class="rz-p-sm-2 rz-text-align-left">
        <RadzenLabel Text="Grupo" /><br />
        <RadzenDropDown @ref=@selectgrupo FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                        Data=@Grupos TextProperty="Value" ValueProperty="Value" AllowClear="true" @bind-Value=valuegrupo Style="width: 90%; max-width: 100px;min-width: 70px;" SearchTextChanged="@(args => searchTextChanged(args))" />
    </div>

    <div class="rz-p-sm-2 rz-text-align-left">
        <RadzenLabel Text="Consultar" />
        <RadzenButton Click=@(args => GetData()) Text="Consultar" Variant="Variant.Flat" Style="width: 100%; max-width: 250px; min-width: 150px;" Icon="check_circle" ButtonStyle="ButtonStyle.Success" />
    </div>

</RadzenRow>

@if (AddResumen == 1)
{
    <div class="m-3 rz-text-align-left">

        <RadzenColumn>
            <div>
                <RadzenTextBox Placeholder="Ficha..." @bind-Value="FichaExtra" class="w-30" />
                <RadzenButton Click=@(args => OnClick(FichaExtra)) Icon="search" ButtonStyle="ButtonStyle.Primary" />
            </div>
        </RadzenColumn>

    </div>

    <RadzenDataGrid @ref="@ResumenGrid" class="rz-shadow-2" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true"
    FilterMode="FilterMode.Advanced" AllowSorting="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@DataResumen" TItem="Resuman" LogicalFilterOperator="LogicalFilterOperator.Or" OrOperatorText="O" AndOperatorText="Y"
                    EqualsText="Igual a" IsLoading=@isLoading EditMode="DataGridEditMode.Single" RowUpdate="@OnUpdateRow" Sort="@Reset" Page="@Reset"
                    Filter="@Reset" ColumnWidth="200px">
        <Columns>

            <RadzenDataGridColumn TItem="Resuman" Title="Ficha" Frozen="true" Property="IdPersonalNavigation.PeFicha" Width="80px">
                <Template Context="conte">
                    @resumen.Where(r => r.IdPersonalNavigation.IdPersonal == conte.IdPersonal).Select(s => s.IdPersonalNavigation.PeFicha).First()
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Resuman" Title="Nombre" Property="IdPersonalNavigation.PeApellido" Width="160px">
                <Template Context="conte">
                    @conte.IdPersonalNavigation.PeNombre  @conte.IdPersonalNavigation.PeApellido
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Resuman" Title="Puesto" Property="IdMontosNavigation.IdPuesTrabNavigation.Ptnombre" Width="160px">
                <Template Context="conte">

                    @*@try
                {*@
                    @if (resumen.Where(r => r.IdPersonalNavigation.IdPersonal == conte.IdPersonal).Select(s => s.IdMontosNavigation.IdPuesTrabNavigation.Ptnombre).Count() == 0)
                    {
                        <span>Sin puesto asignado.</span>
                    }
                    else
                    {
                        @resumen.Where(r => r.IdPersonalNavigation.IdPersonal == conte.IdPersonal).Select(s => s.IdMontosNavigation.IdPuesTrabNavigation.Ptnombre).First()
                    }
                    @* }
                catch
                {
                <span>Sin puesto asignado.</span>
                }*@

                </Template>

                <EditTemplate Context="resume">
                    <RadzenDropDown @bind-Value="puestonuevo" Data="puestos" TextProperty="Ptnombre" ValueProperty="IdPuesTrab" Style="width:100%; display: block;" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Resuman" Title="Suplencia" Property="IdTipSupleNavigation.Tscausa" Width="160px">
                <Template Context="conte">
                    @resumen.Where(r => r.IdPersonalNavigation?.IdPersonal == conte.IdPersonal).Select(s => s.IdTipSupleNavigation?.Tscausa).First()
                </Template>
                <EditTemplate Context="resume">
                    <RadzenDropDown @bind-Value="suplencianueva" Data=" ResumenService.tiposuple" TextProperty="Tscausa" ValueProperty="IdTipSuple" Style="width:100%; display: block;" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Resuman" Title="Ficha Suplido" Property="Rsuplido" Width="160px">
                <EditTemplate Context="resume">
                    <RadzenTextBox Placeholder="Ficha..." @bind-Value="resume.Rsuplido" class="w-100" />
                </EditTemplate>
            </RadzenDataGridColumn>


            <RadzenDataGridColumn TItem="Resuman" Context="resume" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="80px">
                <Template Context="resume">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(resume))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(resume))">
                    </RadzenButton>
                </Template>

                <EditTemplate Context="resume">

                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(resume))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(resume))">
                    </RadzenButton>

                </EditTemplate>
            </RadzenDataGridColumn>

        </Columns>
    </RadzenDataGrid>

    <div class="rz-p-sm-4 rz-text-align-right">
        <RadzenButton Click=@(args => SaveResumen(resumen)) Text="Guardar Puestos" Icon="check_circle" ButtonStyle="ButtonStyle.Success" />
    </div>
}
@*else if (AddResumen == 2 & tempusloading == false)
        {

        if (tempusloading == true)
        {
        <p></p>
        <p></p>
        <p>Cargando lista desde Tempus...</p>
        <p></p>
        <div class="loader">

        <span class="hour"></span>
        <span class="min"></span>
        <span class="circel"></span>
        </div>
        }
        else
        {
        <div class="spinner"></div>
        }
        }*@

else
{

}

@if (AddResumen == 2 & tempusloading == false)
{
  <Load></Load>
}
@if (tempusloading == true)
{
    <p></p>
    <p></p>
    <p class="text-center">Cargando lista desde Tempus...</p>
    <p></p>
    <div class="loader">

        <span class="hour"></span>
        <span class="min"></span>
        <span class="circel"></span>
    </div>
}



@code {

    [CascadingParameter]
    private List<Claim> claims { get; set; }
    public int valuepais { get; set; } = 0;
    public int valueempresa { get; set; } = 0;
    public int valuecentros { get; set; } = 0;
    public int valuedivision { get; set; } = 0;
    public int valuelinea { get; set; } = 0;
    public string? nombrecentro { get; set; } = null;
    public string? nombrelinea { get; set; } = null;

    private async Task CreateData()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        claims = Enumerable.ToList(user.Claims);
        roleClaim = claims.FirstOrDefault(c => c.Type.Contains("role"))?.Value;
        Ficha = claims.FirstOrDefault(c => c.Type.Equals("Ficha"))?.Value;

    }

    RadzenDataGrid<Resuman> ResumenGrid;
    //RadzenDropDown<string> radzenDropDown;
    RadzenDropDown<string> selectgrupo;
    RadzenDropDown<int> centroselect;

    List<Monto> montos;
    List<PuesTrab> puestos;
    List<TipIncen> tipincen;
    List<TipSuple> tipsuples;
    List<Personal> personal;
    List<Personal> personalfinal;//lista filtrada por tempus
    List<Personal> personalnuevo;//personal en tempus que no esta registrado en la base de datos
    List<Personal> personalotraslineas;//personal en tempus de otras lineas o sobre tiempo
    List<Plantilla> plantilla;

    List<Resuman> resumen { get; set; }



    IEnumerable<Centro> DataCentros;
    IEnumerable<Resuman> DataResumen;
    List<Centro> centros;
    List<Division> divisions;
    List<Linea> lineas;
    List<TrabajadorEnPuestoV> tempuslista;

    //List<Grupos> grupos;


    string? valuepersonal;
    string? valuegrupo;
    string? FichaExtra { get; set; }//ficha a agregar de  otra línea

    int puestonuevo { get; set; }//guarda el id del nuevo puesto de trabajo.
    int suplencianueva { get; set; }//guarda el id del nuevo tipo de suplencia.
    int AddResumen = 0; //valida si se agrega resumen

    bool isLoading = false;
    bool tempusloading = false;//valida si se cargan datos de tempus
    bool nuevopersonal = false;//valida si se cargan nuevo personal
    bool editaresumen = false;//valida si ya se cargo resumen para editar en vez de registrar

    //Variables para roles


    Dictionary<string, bool> permisos = new Dictionary<string, bool>();
    public string? roleClaim { get; set; } //guardar el rol del usuario
    public string? Ficha { get; set; } //guardar el rol del usuario

    RadzenDataGrid<Personal> grid;

    IEnumerable<Personal> personalnoregistrado;


    async Task ShowInlineDialog()
    {
        personalnoregistrado = personalnuevo;
        var result = await DialogService.OpenAsync("Atención", ds =>
    @<RadzenStack Gap="0.5rem">
        <p>El siguiente personal (@personalnuevo.Count()) no se encuentra registrado en la base datos de la aplicación.</p>
        <RadzenDataGrid @ref="grid" AllowPaging="true" AllowSorting="true" Data="@personalnoregistrado" TItem="Personal">
            <Columns>

                <RadzenDataGridColumn TItem="Personal" Property="PeFicha" Title="Ficha" />
                <RadzenDataGridColumn TItem="Personal" Property="PeNombre" Title="Nombre" />
                <RadzenDataGridColumn TItem="Personal" Property="PeApellido" Title="Apellido" />

            </Columns>
        </RadzenDataGrid>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">

            <RadzenStack Orientation="Orientation.Horizontal">

                @if (nuevopersonal == false)
            {
                <RadzenButton Click=@(args => InsertNuevoPersonal()) Text="Registrar" Icon="check_circle" ButtonStyle="ButtonStyle.Success" />

            }
            else
            {
                <RadzenButton Text="Aceptar" Click="() => ds.Close(true)" Style="width: 80px;" />
            }

                @*<RadzenButton Text="Cerrar" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Warning" />*@
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
    );
    }

    Dictionary<string, string> trabajadores = new Dictionary<string, string>();
    Dictionary<int, string> Grupos = new Dictionary<int, string>
        {
            { 1, "A" },
            { 2, "B" },
            { 3, "C" },
            { 4, "D" },
            { 5, "N" }
        };

    // dict.Add("key3", "value3");

    Resuman resumeToInsert;
    Resuman resumeToUpdate;

    protected override async Task OnInitializedAsync()
    {

        isLoading = true;
        await CreateData();
        permisos = RolLogicService.ListasRol(roleClaim);
        isLoading = false;
    }

    void searchTextChanged(string text)
    {
        StateHasChanged();
    }


    //generar la lista de trabajadores(personal)  presentes el dia de hoy para asignar puestos o verificar sus registros
    private async Task GetData()
    {
        try
        {
            //validar que se selecciono una linea
            if (valuelinea > 0 && !string.IsNullOrEmpty(valuegrupo))
            {
                AddResumen = 2;
                //obtener resumen ya registrados para el dia
                await ResumenService.GetResumenxLinea(valuelinea);
                await CargarListas();//Llenar listas de personal, montos y puestos
                await CargarTempus();//Llenar listas de tempus


                if (personalnuevo.Count() > 0)
                {
                    List<Resuman> personlregistradohoy = new List<Resuman>();//valida que los nuevos personal no sea de otras lineas
                    personlregistradohoy = await ResumenService.GetResumenFichas(DateTime.Now.Date);

                    if (personlregistradohoy.Count() > 0)
                    {
                        foreach (var ficha in personlregistradohoy)
                        {
                            //Antiguo
                            // if (ficha.IdPersonalNavigation.PeFicha == personalnuevo.FirstOrDefault(f => f.PeFicha == ficha.IdPersonalNavigation.PeFicha).PeFicha)
                            // {
                            //     personalfinal.Remove(personalnuevo.First(f => f.PeFicha == ficha.IdPersonalNavigation.PeFicha));
                            // }

                            if (personalnuevo.Where(fi => fi.PeFicha == ficha.IdPersonalNavigation.PeFicha).Count() > 0)
                            {
                                personalfinal.Remove(personalnuevo.First(f => f.PeFicha == ficha.IdPersonalNavigation.PeFicha));
                            }
                        }
                    }

                    //Metodo para eliminar trabajadores ya registrados
                    personalnuevo = await ResumenService.FiltarListaPersonalNuevo(personalnuevo);


                    if (personalnuevo.Count() > 0)
                    {
                        ShowInlineDialog();
                    }

                }
                //isLoading = true;

                //Si no se ha cargado personal se muestra.
                if (ResumenService.resumenlinea.Count() == 0 & personalnuevo.Count() == 0)
                {

                    if (puestos.Count() > 0)
                    {
                        resumen = new List<Resuman>();
                        await CargarListadeResumen(personalfinal, 1);
                    }
                    else
                    {
                        //Mostrar mensaje de que no hay puestos para esas lineas
                        NotificationService.Notify(new NotificationMessage
                            {
                                Severity = NotificationSeverity.Warning,
                                Duration = 40000,
                                Summary = "No hay puestos asociados a la línea.",
                                Detail = "Contacte el desarrollador."
                            });
                        AddResumen = 0;
                    }

                }

                //Si ya se cargo el personal del día se muestra la consulta de la línea.
                else if (ResumenService.resumenlinea.Count() > 0 & personalnuevo.Count() == 0)
                {
                    NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Duration = 10000,
                            Summary = "Ya se cargo personal el dia de hoy...",
                            Detail = ""
                        });

                    //await CargarListas();//Llenar listas de personal, montos y puestos
                    isLoading = true;
                    DataResumen = ResumenService.resumenlinea;
                    resumen = ResumenService.resumenlinea;
                    isLoading = false;
                    AddResumen = 1;
                }
            }
            else
            {
                //Mostrar mensaje para sellecionar linea
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Warning,
                        Duration = 40000,
                        Summary = "Seleccione una línea.",
                        Detail = "Por favor seleccione  línea y grupo  a consultar."
                    });
                AddResumen = 0;
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Style = "position: relative;",
                    Duration = 40000,
                    Summary = "Error de Cargado",
                    Detail = ex.Message
                });
        }
    }

    private async Task CargarListas()
    {
        //Consultar data en el service
        try
        {
            //await MontosService.GetMontosxCentro(valuecentro);
            await MontosService.GetMontosxLinea(valuelinea);
            await PuestosTrabajoslService.GetPuestosTrabajo(valuelinea);
            await ResumenService.GetTipoInce();
            await ResumenService.GetTipoSuple();
            //cargar listas del service al contexto actual
            personal = await PersonalService.GetPersonal(valuecentros, valuelinea, valuegrupo);
            plantilla = await PersonalService.GetPlantillaPersonal(valuecentros, valuelinea);
            montos = MontosService.MontosPuestoLinea;
            puestos = PuestosTrabajoslService.puesTrab;
            tipsuples = ResumenService.tiposuple;
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Style = "position: relative;",
                    Duration = 40000,
                    Summary = "Error en consultar la información del área",
                    Detail = ex.Message
                });
        }

    }

    private async Task CargarTempus()
    {

        try
        {
            tempusloading = true;
            StateHasChanged();
            //trabajadores = await TempusService.GetDiccionarioTempusConversion();
            tempuslista = await TempusService.GetListaConversion();

            //Cargar lista de personal que marco puesto en tempus
            string fichatempus = "";
            personalfinal = new List<Personal>();
            personalnuevo = new List<Personal>();

            foreach (var f in tempuslista)
            {
                fichatempus = f.CodigoTrabajador.Substring(4).ToString();
                //Filtar lista personal con consulta de tempus
                if (personal.Where(f => f.PeFicha == fichatempus).Count() > 0)
                {
                    if (personalfinal.Where(pf => pf.PeFicha == fichatempus).Count() == 0)
                    {
                        personalfinal.Add(personal.First(f => f.PeFicha == fichatempus));
                        //Si vino de sobretiempo deberia estar en lla lista de tempus
                        personal.Remove(personal.First(f => f.PeFicha == fichatempus));
                    }

                }
                //Si un trabajador no esta registrada en la BD se agrega a esta para registrarlo
                else if (personalnuevo.Where(f => f.PeFicha == fichatempus).Count() == 0 && personalfinal.Where(f => f.PeFicha == fichatempus).Count() == 0)
                {
                    string[] nombre = f.NombreTrab.Split(". ");

                    Personal nuevo = new Personal();
                    nuevo.PeFicha = fichatempus;

                    try
                    {
                        nuevo.PeNombre = nombre[1];
                        nuevo.PeApellido = nombre[0] + ".";
                    }
                    catch
                    {
                        nuevo.PeNombre = f.NombreTrab;
                        nuevo.PeApellido = "";
                    }
                    nuevo.PeEstado = true;
                    nuevo.PeGrupo = valuegrupo;


                    personalnuevo.Add(nuevo);
                }

            }
            //Validar si el personal de la lista personal nuevo es realmente nuevo.

            tempusloading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            tempusloading = false;
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Style = "position: relative;", Duration = 40000, Summary = "Error en consultar la información del área", Detail = ex.Message });
        }


    }


    //Edita los id y los puestos/suplencia en la lista
    async Task EditRow(Resuman resume)
    {
        resumeToUpdate = resume;
        puestonuevo = resumen.Where(r => r.IdPersonalNavigation.IdPersonal == resume.IdPersonal).Select(s => s.IdMontosNavigation.IdPuesTrabNavigation.IdPuesTrab).First();
        suplencianueva = resumen.Where(r => r.IdPersonalNavigation.IdPersonal == resume.IdPersonal).Select(s => s.IdTipSupleNavigation.IdTipSuple).First();
        await ResumenGrid.EditRow(resume);

    }

    //Eliminar trabajador de la lista
    async Task DeleteRow(Resuman resume)
    {
        if (resume == resumeToInsert)
        {
            resumeToInsert = null;
        }

        if (resume == resumeToUpdate)
        {
            resumeToUpdate = null;
        }

        if (resumen.Contains(resume))
        {
            resumen.Remove(resume);
            DataResumen = resumen;

            await ResumenGrid.Reload();
        }
        else
        {
            ResumenGrid.CancelEditRow(resume);
            await ResumenGrid.Reload();
        }
    }

    //Actualizar los valores de la lista segun el edit en el datagrid TODO;Optimizar codigo.
    void OnUpdateRow(Resuman resume)
    {
        for (int i = 0; i < resumen.Count; i++)
        {
            if (resumen[i].IdPersonal == resume.IdPersonal)
            {
                resumen[i].IdMontos = montos.Where(m => m.IdPuesTrabNavigation.IdPuesTrab == puestonuevo).Select(a => a.IdMontos).First();
                resumen[i].IdMontosNavigation = montos.Where(m => m.IdMontos == resume.IdMontos).First();

                resumen[i].IdTipSuple = tipsuples.Where(m => m.IdTipSuple == suplencianueva).Select(a => a.IdTipSuple).First();
                resumen[i].IdTipSupleNavigation = tipsuples.Where(m => m.IdTipSuple == resume.IdTipSuple).First();
            }

        }
        puestonuevo = 0;
        suplencianueva = 0;
        resumeToUpdate = null;
    }

    async Task SaveRow(Resuman resume)
    {
        await ResumenGrid.UpdateRow(resume);
    }

    void CancelEdit(Resuman resume)
    {
        if (resume == resumeToInsert)
        {
            resumeToInsert = null;
        }

        resumeToUpdate = null;

        ResumenGrid.CancelEditRow(resume);

    }

    void Reset()
    {
        resumeToInsert = null;
        resumeToUpdate = null;
    }
    //registral personal nuevo de tempus
    private async Task InsertNuevoPersonal()
    {
        string success;
        try
        {
            nuevopersonal = true;
            success = await PersonalService.InsertarListPersonal(personalnuevo, valuecentros, nombrecentro);
            personalnuevo = new List<Personal>();
            nuevopersonal = false;



            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Style = "position: relative;",
                    Duration = 40000,
                    Summary = "Registro Correcto.",
                    Detail = "Se agregó correctamente el personal"
                });
            //var result = await DialogService.OpenAsync("Atención", ds => onC
            DialogService.Close();
            await GetData();

        }

        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Style = "position: relative;",
                    Duration = 40000,
                    Summary = "Error al insertar nuevo personal.",
                    Detail = ex.Message
                });

        }
    }


    //Registrar el resumen
    private void SaveResumen(List<Resuman> resumen)
    {
        List<Resuman> insert = resumen;
        bool validar = true; //validar si un puesto esta repetido
        try
        {

            foreach (var r in insert)
            {
                if (insert.Where(pu => pu.IdMontosNavigation.IdPuesTrab == r.IdMontosNavigation.IdPuesTrab).Count() >= 2)
                {
                    validar = false;
                }
            }
            if (validar == true)
            {
                ResumenService.InsertResumen(insert);
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Duration = 40000, Summary = "Resumen de Personal Cargado Exitosamente.", Detail = "El personal fue asignado a los puestos correctamente." });
                AddResumen = 0;
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Duration = 40000,
                        Summary = "Existe personal con el mismo puesto asignado",
                        Detail = "Verifique los puestos de la línea."
                    });
            }

        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Duration = 40000, Summary = "Error de Cargado", Detail = ex.Message });

        }

    }

    //Buscar trabajadores de otras líneas
    private async Task OnClick(string ficha)
    {
        List<Personal> agregarpersonalextra = new List<Personal>();
        try
        {
            if (tempuslista.Where(p => p.CodigoTrabajador.Contains(ficha)).Count() > 0)
            {

                agregarpersonalextra = await PersonalService.GetPersonalAlResumen(ficha);

                if (agregarpersonalextra.Count > 0)
                {

                    await CargarListadeResumen(agregarpersonalextra, 0);
                    NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Info,
                            Summary = "Se agregó el  personal",
                            Detail = ficha
                        });

                }
                else
                {
                    NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Warning,
                            Summary = "No se encontró el personal búscado.",
                            Detail = ficha
                        });

                }
            }


        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Ocurrió un error",
                    Detail = ex.Message
                });
        }

    }
    //Funcion para llenar la lista de resumen 1 y agregar personal nuevo 0
    private async Task CargarListadeResumen(List<Personal> listapersonal, int tipo)
    {
        if (nuevopersonal == false)
        {
            int hora = int.Parse(DateTime.Now.ToString("HHmmss"));
            if (resumen.Count == 0 | resumen is null)
            {
                resumen = new List<Resuman>();
            }

            foreach (var p in listapersonal)
            {
                int turno;
                if (valuegrupo == "N")
                {
                    turno = 0;
                }
                else if (hora >= 60000 & hora <= 180000)
                {
                    turno = 1;
                }
                else
                {
                    turno = 2;
                }
                Resuman newresumen = new Resuman();


                newresumen.IdTipSuple = ResumenService.tiposuple.FirstOrDefault(t => t.IdTipSuple == 1).IdTipSuple;
                newresumen.Rfecha = DateTime.Now;
                newresumen.Rturno = turno;
                newresumen.Rgrupo = valuegrupo;
                newresumen.IdPersonal = p.IdPersonal;
                newresumen.Rsuplido = "";
                try
                {
                    if (plantilla.Where(pl => pl.IdPersonal == p.IdPersonal).Count() > 0)
                    {
                        newresumen.IdMontos = MontosService.MontosPuestoLinea.FirstOrDefault(t => t.IdPuesTrab == plantilla.FirstOrDefault(pl => pl.IdPersonal == p.IdPersonal).PidPuesto).IdMontos;
                        newresumen.IdMontosNavigation = MontosService.MontosPuestoLinea.Where(m => m.IdMontos == newresumen.IdMontos).First();
                    }
                    else
                    {
                        newresumen.IdMontos = 0;
                        newresumen.IdMontos = MontosService.MontosPuestoLinea.FirstOrDefault(t => t.IdPuesTrabNavigation.Ptnombre == "Sin Puesto de Trabajo").IdMontos;
                        newresumen.IdMontosNavigation = MontosService.MontosPuestoLinea.Where(m => m.IdMontos == newresumen.IdMontos).First();
                    }
                }
                catch
                {

                }
                newresumen.RuserVali = claims[2].Value + " " + claims[3].Value;
                newresumen.RuserPago = "";
                newresumen.IdTipIncen = ResumenService.tipoincentivo.FirstOrDefault(t => t.IdTipIncen == 1).IdTipIncen;

                newresumen.IdPersonalNavigation = listapersonal.Where(f => f.IdPersonal == p.IdPersonal).First();

                newresumen.IdTipIncenNavigation = ResumenService.tipoincentivo.Where(i => i.IdTipIncen == newresumen.IdTipIncen).First();
                newresumen.IdTipSupleNavigation = ResumenService.tiposuple.Where(s => s.IdTipSuple == newresumen.IdTipSuple).First();


                resumen.Add(newresumen);

                if (tipo == 0)
                {
                    await ResumenGrid.InsertRow(newresumen);
                    //await SaveRow(newresumen);
                }


            }
            DataResumen = resumen;
            isLoading = false;
            if (resumen.Count() > 0)
            {
                AddResumen = 1;
            }

        }
    }

}


